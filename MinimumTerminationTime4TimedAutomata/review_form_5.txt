<!--
  == For your convenience, this form can be processed by EasyChair
  == automatically. You can fill out this form offline and then upload it
  == to EasyChair. Several review forms can be uploaded simultaneously.
  == You can modify your reviews as many times as you want.
  == 
  == When filling out the review form please mind the following rules:
  == 
  == (1) Blocks such as this are comments. EasyChair will ignore them.
  ==     Do not write any text into these blocks as it will be ignored.
  ==     You can add comments to the review form or remove them.
  == (2) Write only into the tags where instructed. Do not modify any
  ==     tags and attributes, or the review will become unusable and will
  ==     be rejected by EasyChair.
  -->
<review id="2100934::978201"
        submission="5"
        title="Minimum Termination Time for Timed Automata Models with Infinite Cycles"
        authors="Omar Bataineh,
                 Mark Reynolds"
        pc_member="Grigore Rosu">
<score id="226607" name="Overall evaluation">
<!--
  == Select your choice from the options below and write its number below,
  == before the </score> tag.
  ==
  == 3 strong accept
  == 2 accept
  == 1 weak accept
  == 0 borderline paper
  == -1 weak reject
  == -2 reject
  == -3 strong reject
  -->
  2
</score>
<score id="226608" name="Reviewer's confidence">
<!--
  == Select your choice from the options below and write its number below,
  == before the </score> tag.
  ==
  == 5 (expert)
  == 4 (high)
  == 3 (medium)
  == 2 (low)
  == 1 (none)
  -->
  3
</score>
<!-- ======== Review ======== -->
<text id="226610" name="Review">
<!--
  == Please provide a detailed review, including justification for your
  == scores. This review will be sent to the authors unless the PC chairs
  == decide not to do so. This field is required unless you have an
  == attachment..
  -->
The main contribution of this paper is proposing a modification to an existing
algorithm for computing the BCET (best-case execution time) in Timed Automata, so that
termination can always be guaranteed even if infinite cycles are present in the automata.

The authors used concrete examples to show that for timed automata with infinite cycles,
the algorithm for computing  proposed by Behrmann et al may not terminate. Then the authors analyzed 
the underlying defects of Behrmann et al 's algorithm which caused the non-termination, and finally
they provided a solution to the reported problem and proved its correctness. Generally speaking, 
this paper presents their achievements gradually in a reasonable order so that it makes the readers
tend to believe the authors' work really improve the state-of-the-art algorithm for computing BCET.

At the beginning, the authors briefly introduced how the most model checking tools apply 
extrapolation algorithms to guarantee termination of timed automata analysis. Then they 
pointed out why these techniques cannot be directly used in some interesting problems such as BCET,
and in this background, the authors naturally introduced Behrmann et al's algorithm (based on which
the authors of this paper proposed the modification) for computing minimum execution time of TA (timed automata). 
In the end of the first part, the authors identified the key difficulties of developing a solution
to the minimum/maximum termination time problem using zone approach as: (1) adapting classical extrapolation
operations to guarantee termination. (2) adapting classical canonicalization operation to keep information of
extra clock accurate (the concept of extra clock was proposed by Behrmann et al which is not reset during 
the analysis so that the total execution time of the automata can be precise). The summary of key difficulties
and key contribution is concise but expressive. 
 
There is a typo in the last paragraph of the introduction part: should be `The latter` instead of `The later`.

The second part provided the basic definitions used in the paper. In this part, the authors also detailed how
to implement clock zone concept using DBMs (difference bound matrices), so that infinitely many concrete states
can be converted to a finitely many abstract states. Definition 6 abstracts the implementation of extrapolation
function, which is good; but it also makes people raise a question: the canonicalization function is equally important,
in fact, the naive implementation of canonicalization function is responsible for its non-termination in some  


</text>
<text id="226611" name="Confidential remarks for the program committee">
<!--
  == If you wish to add any remarks intended only for PC members, please
  == write them below. These remarks will only be seen by the PC members
  == having access to reviews for this submission. They will not be sent to
  == the authors. This field is optional..
  -->






</text>
<reviewer>
  <first_name> He </first_name>
  <last_name>  Xiao </last_name>
  <email> hexiao2@illinois.edu </email>
</reviewer>
</review>
