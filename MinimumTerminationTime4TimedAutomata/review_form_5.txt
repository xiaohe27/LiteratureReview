<!--
  == For your convenience, this form can be processed by EasyChair
  == automatically. You can fill out this form offline and then upload it
  == to EasyChair. Several review forms can be uploaded simultaneously.
  == You can modify your reviews as many times as you want.
  == 
  == When filling out the review form please mind the following rules:
  == 
  == (1) Blocks such as this are comments. EasyChair will ignore them.
  ==     Do not write any text into these blocks as it will be ignored.
  ==     You can add comments to the review form or remove them.
  == (2) Write only into the tags where instructed. Do not modify any
  ==     tags and attributes, or the review will become unusable and will
  ==     be rejected by EasyChair.
  -->
<review id="2100934::978201"
        submission="5"
        title="Minimum Termination Time for Timed Automata Models with Infinite Cycles"
        authors="Omar Bataineh,
                 Mark Reynolds"
        pc_member="Grigore Rosu">
<score id="226607" name="Overall evaluation">
<!--
  == Select your choice from the options below and write its number below,
  == before the </score> tag.
  ==
  == 3 strong accept
  == 2 accept
  == 1 weak accept
  == 0 borderline paper
  == -1 weak reject
  == -2 reject
  == -3 strong reject
  -->
  1
</score>
<score id="226608" name="Reviewer's confidence">
<!--
  == Select your choice from the options below and write its number below,
  == before the </score> tag.
  ==
  == 5 (expert)
  == 4 (high)
  == 3 (medium)
  == 2 (low)
  == 1 (none)
  -->
  3
</score>
<!-- ======== Review ======== -->
<text id="226610" name="Review">
<!--
  == Please provide a detailed review, including justification for your
  == scores. This review will be sent to the authors unless the PC chairs
  == decide not to do so. This field is required unless you have an
  == attachment..
  -->
Summary:
This paper reported a non-termination problem of Behrmann et al 's algorithm
for computing the minimum cost of reaching a goal state in priced timed
automata. The authors used concrete examples to show that in certain
circumstances, when infinite cycles exist, that algorithm may not terminate.
Finally, the authors proposed a modified algorithm, where termination can be
guaranteed for any arbitrary timed automata.


The authors clearly explain the concepts related to their work, and some
import ones are informally described here (for later reference):
1. Timed automata: a state in timed automata includes both location (like the
state in classical automata) and a valuation function mapping clock variables 
to non-negative real numbers. The best-case execution time (BCET) of running a
timed automata is defined as the greatest lower bound of all possible execution
times.

2. Clock-Zones and Difference Bound Matrices (DBM): 
Infinitely many concrete clock valuations of timed automata are converted to a
finite number of clock-zones (implemented using DBM) with a certain upperbound,
so that only a finite number of abstract states need to be explored when
computing BCET.

3. Extrapolation and Canonicalization operations:
The extrapolation operation ensures the finiteness of abstract zones by setting
the element of the matrix which exceeds the predefined boundary `M` to either
infinity or `-M`; The finiteness of state-space is guaranteed by extrapolation
operation. In contrast, the canonicalization operation ensures that the abstract
zone has a unique representation by assigning the tightest possible bound to the
difference of each pair of clocks.

4. Extra clock delta : A special clock variable that never gets extrapolated
   or reset.

Strengths:
*  Clearly explain how the original algorithm works, and exemplify why the
original algorithm fails to terminate due to a canonicalization mistake: 
suppose an automaton clock variable z is neither reset before entering an 
infinite cycle nor inside the cycle, then we have a constraint that specifying
z is equivalent to the extra clock variable delta. When z's value exceeds
constant M, it gets extrapolated and becomes infinity. However, in the
subsequent canonicalization process, the original algorithm wrongly involves the
constraint `z = delta`; so that after canonicalization, z's upper bound will be
shrunk to delta's, which is some big constant larger than M. As a result, in the
later extrapolation process, z will be set to infinity again... This is precisely
captured by the authors' description: "we will find ourselves dealing with real 
zones rather than abstracted ones and hence the loop can be taken infinitely
often enlarging the state space such that a fixed point will never be reached".


*  Provide an easy yet effective solution for the non-termination problem of
the original algorithm: adding 4 must-be-satisfied conditions to the original
algorithm so that original extrapolation and canonicalization are replaced by
partial extrapolation and specialized canonicalization. In the partial 
extrapolation, not only the extra clock delta, but also all the constraints that
involve delta will not be touched; What's more, in the modified algorithm, 
canonicalization operations for the constraints that do not contain extra clock
will be performed independently, without the participation of constraints that
involve extra clock. Therefore, this special canonicalization mechanism does 
solve the non-termination problem in the above example. 
  

*  Some diagram not only increases the readability, but also makes it
easier for future internal reference. For example, in the third part,
a matrix composed of dot sign (.) and asterisk sign (*) is presented to
denote the general form of partial extrapolated matrix. This representation 
makes very clear distinction between the "extra clock entries" that are not
touched during extrapolation process, and the entries only involve automata
clocks which may be extrapolated. Later in the paper, the entries with 
certain properties can be easily referenced by either "dot entries" or
"asterisk entries", which is both concise and expressive.

Weaknesses:
* Not enough evaluation. It is claimed that there is a fast implementation of
the proposed algorithm, which confirms the algorithm terminates and computes
correct BCET for the three examples where infinite cycles exist. However, does
the new algorithm also outperforms the old one when there is no infinite cycles?
Whether the new algorithm achieves its always-termination feature at the cost
of more overheads?

*

Some minor issues:
The term 'canonicalization' occurs many times throughout the paper. 
But no clear explanation or examples of canonicalization operation are given
until the part 3. In contrast, the extrapolation operation is given formal
definition in part 2.

In Theorem 1, it claims its algorithm for best-case execution time computes
the least upper bound on execution times. This seems counter-intuitive
and inconsistent with the previous definition of best-case execution time
in part two.

Typo in page 2 (before part 2): should be `The latter` instead of `The later`.

</text>
<text id="226611" name="Confidential remarks for the program committee">
<!--
  == If you wish to add any remarks intended only for PC members, please
  == write them below. These remarks will only be seen by the PC members
  == having access to reviews for this submission. They will not be sent to
  == the authors. This field is optional..
  -->






</text>
<reviewer>
  <first_name> He </first_name>
  <last_name>  Xiao </last_name>
  <email> hexiao2@illinois.edu </email>
</reviewer>
</review>
